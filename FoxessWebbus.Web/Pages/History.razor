@using FoxessWebbus.Web.Services
@page "/history"

<PageTitle>History</PageTitle>

<h1>History</h1>

 @*  <RadzenChart>
                <RadzenLineSeries Smooth="true" Data="@pvTotalDataItem" CategoryProperty="Date" Title="PV Total" LineType="LineType.Dashed" ValueProperty="Value">
                    <RadzenMarkers MarkerType="MarkerType.Square" />
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="true" Data="@pv1DataItem" CategoryProperty="Date" Title="PV 1" ValueProperty="Value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenLineSeries> 
                <RadzenLineSeries Smooth="true" Data="@pv2DataItem" CategoryProperty="Date" Title="PV 2" ValueProperty="Value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenLineSeries> 
                <RadzenCategoryAxis Padding="20"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="PV" />
                </RadzenValueAxis>
    </RadzenChart> *@
<div class="rz-p-12 rz-text-align-center">
    <RadzenLabel Text="Start Date" Component="DatePickerWithTime" Style="margin-right: 8px; vertical-align: middle;" />
    <RadzenDatePicker @bind-Value=@startDateTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Name="DatePickerWithTime" />

     <RadzenLabel Text="End Date" Component="DatePickerWithTime" Style="margin-right: 8px; vertical-align: middle;" />
    <RadzenDatePicker @bind-Value=@endDateTime ShowTime="true" ShowSeconds="true" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="MM/dd/yyyy HH:mm" Name="DatePickerWithTime" />

    <MudButton @onclick="ReloadData" Variant="MudBlazor.Variant.Filled">Refresh</MudButton>
</div>




<div>
    <MudChart ChartType="ChartType.Line" ChartOptions="options" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
   
    <MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>
</div>



@code {
    GetHistoryBetweenDates historyService = new GetHistoryBetweenDates();
    private int Index = -1;
    public List<ChartSeries> Series = new List<ChartSeries>();
    DateTime startDateTime = DateTime.Now.AddHours(-12);

    DateTime endDateTime = DateTime.Now;

    public string[] XAxisLabels;
   @*  DataItem[] pvTotalDataItem;
    DataItem[] pv1DataItem;
    DataItem[] pv2DataItem; *@
    public ChartOptions options = new ChartOptions(){
        DisableLegend = true
        
    };
    class DataItem
    {
        public string Date { get; set; }
        public double Value { get; set; }
    }
    
    public async void GetHistoryData(){

        var historyData = historyService.GetHistory(startDateTime, endDateTime);
        XAxisLabels = historyData.GroupBy(y => y.LoggedDateTime.Ticks / TimeSpan.TicksPerMinute /10).Select(x => x.First().LoggedDateTime.ToString()).ToArray();
        ChartSeries PVTotal = new ChartSeries(){
            Name = "PV Total",
            Data = historyData
        .GroupBy(x => x.LoggedDateTime.Ticks / TimeSpan.TicksPerMinute / 10)
        .Select(group => group.Average(x => x.PVPowerTotal)).ToArray()
        };
        Series.Add(PVTotal);
    }

    protected override async Task OnParametersSetAsync()
    {
        
       GetHistoryData();
        

    }


    public void ReloadData()
    {
        GetHistoryData();
        StateHasChanged();
    }


}
