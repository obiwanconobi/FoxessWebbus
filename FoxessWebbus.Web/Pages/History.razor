@using FoxessWebbus.Web.Services
@page "/history"

<PageTitle>History</PageTitle>

<h1>History</h1>

 @*  <RadzenChart>
                <RadzenLineSeries Smooth="true" Data="@pvTotalDataItem" CategoryProperty="Date" Title="PV Total" LineType="LineType.Dashed" ValueProperty="Value">
                    <RadzenMarkers MarkerType="MarkerType.Square" />
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenLineSeries>
                <RadzenLineSeries Smooth="true" Data="@pv1DataItem" CategoryProperty="Date" Title="PV 1" ValueProperty="Value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenLineSeries> 
                <RadzenLineSeries Smooth="true" Data="@pv2DataItem" CategoryProperty="Date" Title="PV 2" ValueProperty="Value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                    <RadzenSeriesDataLabels Visible="true" />
                </RadzenLineSeries> 
                <RadzenCategoryAxis Padding="20"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                    <RadzenAxisTitle Text="PV" />
                </RadzenValueAxis>
    </RadzenChart> *@


<div>
    <MudChart ChartType="ChartType.Line" ChartOptions="options" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
   
    <MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>
</div>



@code {
    GetHistoryBetweenDates historyService = new GetHistoryBetweenDates();
    private int Index = -1;
    public List<ChartSeries> Series = new List<ChartSeries>();
    public string[] XAxisLabels;
   @*  DataItem[] pvTotalDataItem;
    DataItem[] pv1DataItem;
    DataItem[] pv2DataItem; *@
    public ChartOptions options = new ChartOptions(){
        DisableLegend = true
        
    };
    class DataItem
    {
        public string Date { get; set; }
        public double Value { get; set; }
    }
   
    protected override async Task OnParametersSetAsync()
    {
        
       // options.
        var historyData = historyService.GetHistory(DateTime.Now.AddHours(-12), DateTime.Now);

     @*    pvTotalDataItem = historyData.Select(historyData => new DataItem{
            Date = historyData.LoggedDateTime.ToString(),
            Value = historyData.PVPowerTotal
        }).ToArray(); *@

     @*    pv1DataItem = historyData.Select(historyData => new DataItem{
            Date = historyData.LoggedDateTime.ToString(),
            Value = historyData.PVPower1
        }).ToArray();

        pv2DataItem = historyData.Select(historyData => new DataItem{
            Date = historyData.LoggedDateTime.ToString(),
            Value = historyData.PVPower2
        }).ToArray(); *@

        XAxisLabels = historyData.Select(x => x.LoggedDateTime.ToString()).ToArray();
        ChartSeries PVTotal = new ChartSeries(){
            Name = "PV Total",
            Data = historyData.Select(x => Convert.ToDouble(x.PVPowerTotal)).ToArray()
        };
        Series.Add(PVTotal);
        

    }

    public void ReloadData(DateTime startDate, DateTime endDate)
    {
        
        StateHasChanged();
    }


}
