@using RICADO.Modbus;
@using Data;
@using Shared;
@using System.Diagnostics;
@inject IJSRuntime JS;
@page "/"

<PageTitle>Index</PageTitle>

<!--<EditForm Model="@PollTime" OnSubmit="@Submit">
    <InputText @bind-Value="PollTime" />
    <button type="submit">Submit</button>
</EditForm> -->


<MudContainer justify-start MaxWidth="MaxWidth.ExtraSmall">
 
    <MudGrid Spacing="1">
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none" />
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none">
                <MudAvatar Color="Color.Success" Size="Size.Large"  Variant="Variant.Filled" Style="">
                    <MudIcon Color="Color.Default" Style="object-position: center;" Icon="@Icons.Material.Rounded.SolarPower" Size="Size.Large" />
                </MudAvatar>
                 <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">Solar</MudText>
                <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">@TotalSolar</MudText>
                
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none"/>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none">
                <MudAvatar Color="gridColorIndicator" Size="Size.Large" Variant="Variant.Filled">
                    <MudIcon Color="Color.Default" Icon="@Icons.Material.Rounded.ElectricalServices" Size="Size.Large" />
                </MudAvatar>
                 <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">Grid</MudText>
                <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">@TotalGridUse</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none">
                
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none">
                <MudAvatar Color="Color.Info" Size="Size.Large" Variant="Variant.Filled">
                    <MudIcon Color="Color.Default" Icon="@Icons.Material.Rounded.House" Size="Size.Large" />
                </MudAvatar>
                 <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">House</MudText>
                <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">@TotalHouse</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none" />
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none">
                <MudAvatar Style="display:grid;" Color="@batteryColorIndicator" Size="Size.Large" Variant="Variant.Filled">
                    <MudIcon Color="Color.Default" Icon="@Icons.Material.Rounded.BatteryStd" Size="Size.Large" />
                    <br/>
                    <MudText Align="Align.Center" Typo="Typo.caption">@CurrentBatterySoc</MudText>
                </MudAvatar>
                 <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">Battery</MudText>
                <br/>
                <MudText Align="Align.Center" Style="padding-left:12px" Typo="Typo.overline">@TotalBattery</MudText>
            </MudPaper>
        </MudItem>
        <MudItem xs="4">
            <MudPaper Height="100px" Width="100px" Style="box-shadow:none" />
        </MudItem>
    </MudGrid>
   
</MudContainer>





@if(model == null){
    <h1>loading...</h1>
}else{
    <h1>Solar</h1>
    <h2>PV Power: @model.PVPowerTotal wh</h2>
    <h2>PV 1: @model.PVPower1 wh</h2>
    <h2>PV 2: @model.PVPower2 wh</h2>

    <h1>Battery</h1>
    <h2>Battery Soc: @model.BatterySoc %</h2>
    <h2>Battery Temp: @model.BatteryTemp c</h2>
    <h2>Battery Charge: @model.BatteryCharge w</h2>
    <h2>Battery Discharge: @model.BatteryDischarge w</h2>

    <h1>Inverter</h1>
    <h2>Feed In: @model.FeedIn wh</h2>
    <h2>From Grid: @model.FromGrid wh</h2>
    <h2>Inverter Temp: @model.InverterTemp c</h2>

}



@code{
    public H1Model model = null;
    public short total = 0;

    UploadModelData upload = new UploadModelData();

    public string? PollTime { get; set; } = "";

    public string? TotalSolar {get;set;} = "";

    public string? TotalHouse {get;set;} = "";
    public string? TotalGridUse {get;set;} = "";
    public string? TotalBattery {get;set;} = "";
    public string? CurrentBatterySoc {get;set;} = "";
    public MudBlazor.Color batteryColorIndicator {get;set;} = Color.Success;
    public MudBlazor.Color gridColorIndicator {get;set;} = Color.Success;


    private void Submit()
    {
        SettingsHelper.AddOrUpdateAppSetting<int>("PollTime", Convert.ToInt32(PollTime));
        var result = SettingsHelper.ReadAppSetting<int>("PollTime");
        // Logger.LogInformation("Model.Id = {Id}", Model?.Id);
    }


    protected async void Upload(H1Model model){
        upload.UploadData(model);
    }    

    protected override async Task OnParametersSetAsync()
    {
            Stopwatch watch = new Stopwatch();

            watch.Start();

            model = new H1Model(){
            PVPower1 = await GetData(31002),
            PVPower2 = await GetData(31005), 
            BatteryCharge = await RelativeZero(31022, true),
            BatteryDischarge = await RelativeZero(31022, false),
            BatterySoc = await GetData(31024),
            BatteryTemp = await FormatTemp(31023),
            InverterTemp = await FormatTemp(31018),
            FeedIn = await RelativeZero(31014, true),
            FromGrid = await RelativeZero(31014, false)
            };
            model.PVPowerTotal = await PVTotal(model);

          
            CurrentBatterySoc = model.BatterySoc.ToString() + "%";
            TotalSolar = model.PVPowerTotal.ToString() + "w";
            TotalGridUse = GridUse() + "w";
            TotalBattery = BatteryUse() + "w";
            TotalHouse = TotalHouseUse() + "w";
            
            watch.Stop();

            Upload(model);
            Console.WriteLine("VERSION: 0.0.1");

            Console.WriteLine("Time Taken: " + watch.Elapsed);
            Console.WriteLine("Inverter Temp:" + model.InverterTemp.ToString());
            Console.WriteLine("Battery charge:" + model.BatteryCharge.ToString());
            Console.WriteLine("Battery Discharge:" + model.BatteryDischarge.ToString());
            Console.WriteLine("Battery Soc:" +model.BatterySoc.ToString());
            Console.WriteLine("Battery Temp:" + model.BatteryTemp.ToString());
            Console.WriteLine("From Grid:" + model.FromGrid.ToString());
            Console.WriteLine("Feed in:" + model.FeedIn.ToString());
    }

    private string GridUse(){

        if(model.FeedIn > 5){
            gridColorIndicator = Color.Success;
            return model.FeedIn.ToString();
        }

        if (model.FromGrid > 5){
            if(model.FromGrid > 20){
                gridColorIndicator = Color.Warning;
            }
            
            return model.FeedIn.ToString();
        }

        return "0";
       
    }

    private string BatteryUse(){

        if(model.BatteryDischarge > 0){
            batteryColorIndicator = Color.Warning;
            return model.BatteryDischarge.ToString();
        }else{
            batteryColorIndicator = Color.Success;
            return model.BatteryCharge.ToString();
        }
      

    }

    private string TotalHouseUse()
    {
        short total = 0;
        total += model.BatteryDischarge;
        total += model.FromGrid;
        
        short solarToHouse = 0;
        solarToHouse += model.PVPowerTotal;
        solarToHouse -= model.FeedIn;
        solarToHouse -= model.BatteryCharge;

        total += solarToHouse;

        return total.ToString();
    }


        //Simply divides by 10 to get the temp in correct format
        private async Task<short> FormatTemp(ushort registerNumber)
    {
        var result = await GetData(registerNumber);
        if(result.ToString().Length > 2){
            result /= 10;
            return result;
        }

        return result;
        
    }

    private async Task<short> PVTotal(H1Model fromModel)
    {
        await Task.Delay(1);
        total = 0;
        total += fromModel.PVPower1;
        total += fromModel.PVPower2;    
        return total;
    }

    private async Task<short> GetData(ushort registerNumber){
        using (ModbusRTUDevice device = new ModbusRTUDevice(247, ConnectionMethod.TCP, "192.168.1.11", 502, 1000, 5))
        {
                Stopwatch timer = new Stopwatch();
                await device.InitializeAsync(CancellationToken.None);
                timer.Start();
                ReadRegistersResult data = await device.ReadHoldingRegistersAsync(registerNumber, 1, CancellationToken.None);
                timer.Stop();
                Console.WriteLine("Time taken for " + registerNumber + ": "  + timer.Elapsed);
                foreach (var value in data.Values)
                {
                    return value;
                // Console.Write(value);
                }
                return 0;
        }
    }
    // This is a hacky method which returns the value only if it is either above or below zero.
    // Because some values share a register and can be minus
    private async Task<short> RelativeZero(ushort registerNumber, bool aboveZero)
    {

       var result = await GetData(registerNumber);
            if(result > 0 && aboveZero == false){
                    return result;
            }else if (result < 0 && aboveZero == true){
                result *= -1;
                return result;
            }

            return 0;     

    }
}
    
    
